from quotonic.qpnn import QPNN


# THIS NEEDS TO BE REVISED DUE TO CLEMENTS FIX
def test_QPNN():
    qpnn = QPNN(2, 4, 2)
    assert qpnn.numModes == 4


# def test_QPNN():
#     qpnn = QPNN(2, 4, 2, alphaWG=0.3)

#     SRs = [0.5 * np.ones(4 * 3), 0.5 * np.ones(4 * 3)]
#     qpnn.set_SRs(SRs)

#     alphas = qpnn.alphas
#     qpnn.set_alphas(alphas)

#     phases = np.array(
#         [
#             -10.69636698,
#             -4.20198684,
#             -7.4156409,
#             11.27643672,
#             1.60883111,
#             9.77311983,
#             3.9374764,
#             -10.83805882,
#             -10.37726614,
#             9.69098099,
#             9.4016286,
#             -4.9619311,
#             2.62070533,
#             9.53728498,
#             -5.72831074,
#             -12.45160788,
#             -2.79151281,
#             -8.99778949,
#             2.85968336,
#             -11.45412614,
#             -0.36030467,
#             -5.25484937,
#             5.18385221,
#             1.18153428,
#             -6.63216601,
#             -8.2059749,
#             -6.25602616,
#             7.11503102,
#             8.67824981,
#             -9.8438485,
#             10.96759846,
#             -11.27368649,
#         ]
#     )
#     qpnn.set_phases(phases)

#     result = np.array(
#         [
#             [
#                 -0.43462247 - 0.13191914j,
#                 0.03447871 + 0.39158293j,
#                 0.29038865 + 0.00683719j,
#                 0.00199879 + 0.49964581j,
#                 0.145636 - 0.08512992j,
#                 -0.07442765 - 0.19039179j,
#                 0.27835444 - 0.09653111j,
#                 -0.13628459 + 0.0279035j,
#                 -0.0523317 - 0.23521656j,
#                 0.26462393 - 0.02577157j,
#             ],
#             [
#                 -0.24410397 - 0.06768699j,
#                 0.03746799 + 0.06879361j,
#                 -0.45848452 + 0.07002072j,
#                 0.14834028 + 0.37248693j,
#                 0.02779992 - 0.05704978j,
#                 0.32413414 + 0.25151185j,
#                 -0.05596094 - 0.18406769j,
#                 0.11761001 - 0.42065366j,
#                 0.18427494 + 0.33791407j,
#                 -0.07007814 + 0.02522013j,
#             ],
#             [
#                 -0.07877848 + 0.0619389j,
#                 0.07790508 - 0.46111724j,
#                 0.05606654 - 0.18668464j,
#                 -0.17582383 + 0.33029044j,
#                 -0.32231695 + 0.05130558j,
#                 0.20712846 + 0.20158823j,
#                 -0.30472594 + 0.09532204j,
#                 -0.10227052 + 0.16142693j,
#                 0.0461417 - 0.14469695j,
#                 0.47153307 + 0.13901984j,
#             ],
#             [
#                 0.26026282 + 0.39729631j,
#                 0.06303162 + 0.04034328j,
#                 -0.37274605 + 0.03337367j,
#                 0.03031744 - 0.0206497j,
#                 0.1111087 + 0.02941145j,
#                 -0.13914429 + 0.04658827j,
#                 0.52207554 + 0.01351126j,
#                 0.00534739 + 0.00919771j,
#                 0.08095806 - 0.03611647j,
#                 0.42409276 + 0.36346347j,
#             ],
#             [
#                 0.22989716 + 0.24343687j,
#                 0.18136455 - 0.22343012j,
#                 0.20122119 + 0.0171002j,
#                 -0.12502712 + 0.33816348j,
#                 0.21012187 + 0.19396132j,
#                 0.12433059 + 0.2771548j,
#                 0.26893507 + 0.01674886j,
#                 -0.10699089 - 0.11396893j,
#                 0.1204713 - 0.31964354j,
#                 -0.46803908 - 0.165739j,
#             ],
#             [
#                 -0.02343498 - 0.16951827j,
#                 0.19633785 - 0.26232657j,
#                 0.37922921 - 0.06686001j,
#                 0.18200212 - 0.13010371j,
#                 0.4033564 + 0.02645405j,
#                 0.08457238 + 0.11294647j,
#                 0.18384831 + 0.27395999j,
#                 -0.16795163 - 0.12962596j,
#                 -0.00972064 + 0.5150229j,
#                 0.24663778 - 0.04086548j,
#             ],
#             [
#                 0.23414529 - 0.0579815j,
#                 0.03216476 - 0.09923016j,
#                 0.05654485 + 0.17770486j,
#                 0.02152382 + 0.33179099j,
#                 -0.57644599 - 0.26545767j,
#                 -0.12861048 - 0.21289914j,
#                 0.30620896 + 0.15298305j,
#                 -0.13857487 + 0.05380974j,
#                 -0.07059538 + 0.37751973j,
#                 -0.17880313 - 0.04734938j,
#             ],
#             [
#                 -0.37066947 - 0.19648854j,
#                 0.11537361 - 0.52277557j,
#                 -0.07404132 + 0.24288908j,
#                 0.11059381 - 0.1458171j,
#                 -0.06306661 - 0.13445382j,
#                 -0.14454891 - 0.07960365j,
#                 0.26514465 + 0.06837518j,
#                 0.39856162 - 0.19574253j,
#                 -0.12164448 - 0.31683539j,
#                 -0.03507059 + 0.03973016j,
#             ],
#             [
#                 0.18280508 + 0.08096739j,
#                 0.10136137 + 0.26639584j,
#                 0.3729127 - 0.23626238j,
#                 0.05894189 - 0.16389691j,
#                 -0.31377812 - 0.07672992j,
#                 0.45687475 - 0.05474865j,
#                 0.14370919 + 0.03378171j,
#                 0.431278 - 0.3145824j,
#                 0.06598101 - 0.10696259j,
#                 0.11472461 + 0.04215293j,
#             ],
#             [
#                 0.0793005 + 0.26843525j,
#                 -0.0018264 - 0.21477912j,
#                 0.18266647 + 0.07679102j,
#                 -0.18138381 + 0.24684148j,
#                 0.26382458 + 0.06209591j,
#                 -0.09867163 - 0.5119283j,
#                 -0.20430094 - 0.25369375j,
#                 0.42317019 + 0.02208538j,
#                 0.18421277 + 0.26157671j,
#                 0.00986226 + 0.09510885j,
#             ],
#         ],
#         dtype=complex,
#     )

#     print(np.abs(qpnn.sysFunc() - result))

#     assert np.allclose(qpnn.sysFunc(), result, atol=0.1)
